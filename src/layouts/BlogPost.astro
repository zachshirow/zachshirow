---
import type { CollectionEntry } from "astro:content";

// related to backlinks
// import type { GetStaticPaths } from "astro";
// import { getCollection } from "astro:content";

import BaseLayout from "./Base.astro";
import BlogHero from "@/components/blog/Hero";
import JoinTelegram from "@/components/layout/JoinTelegram";
// import Commenting from "@/components/layout/Commenting";
// import GraphComment from "@/components/layout/GraphComment";
import Giscus from "@/components/layout/Giscus";


// async function getBacklinks() {
// 	const allPosts = await Astro.glob('../content/post/*.md',);
// 	const backlinks = await allPosts.map((post) => {
// 		if(post.rawContent.toString().includes(slug)){
// 			return {
// 				params: {
// 					slug: post.file.
// 				}, 
// 				props: {
// 					title: post.frontmatter.title, 
// 					description: post.frontmatter.description
// 				}
// 			}
// 		}
// 		return;
		
// 	})
// 	console.log(backlinks)
// 	return backlinks
// } 

// const backlinks = getBacklinks()

// console.log(backlinks)


interface Props {
	post: CollectionEntry<"post">;
}

const {slug} = Astro.params;
const { post } = Astro.props;
const {
	data: { title, description, image, publishDate, updatedDate },
	// slug,
} = post;


// const socialImage = ogImage ?? `/og-image/${slug}.png`;
const socialImage = image ?? "/social-card.jpg"
const articleDate = updatedDate?.toISOString() ?? publishDate.toISOString();
const { headings } = await post.render();


// getting backlinks

// export const getStaticPaths = (async () => {

// const backLinks = await getCollection("post", (content) => {
	
// 	return content.body.toString().includes(slug) && content.data.draft !== true;
// });

// return backLinks.map((entry) => ({
// 	params: { slug: entry.slug },
// 	props: { 
// 		title: entry.data.title
// 	 },
// }));

// }) satisfies getStaticPaths

// console.log(await backlinks)

---

<script>

	const scrollBtn = document.getElementById("to-top-btn") as HTMLButtonElement;
	const targetHeader = document.getElementById("blog-hero") as HTMLDivElement;

	function callback(entries: IntersectionObserverEntry[]) {
		entries.forEach((entry) => {
			// only show the scroll to top button when the heading is out of view
			scrollBtn.dataset.show = (!entry.isIntersecting).toString();
		});
	}

	scrollBtn.addEventListener("click", () => {
		document.documentElement.scrollTo({ top: 0, behavior: "smooth" });
	});

	const observer = new IntersectionObserver(callback);
	observer.observe(targetHeader);
</script>

<BaseLayout meta={{ title, description, articleDate, image: socialImage }}>
	<div class="gap-x-10 lg:flex lg:items-start">
		{
			!!headings.length && (
				<aside class="lg:sticky top-20 order-2 -me-32 basis-64 hidden lg:block">
					<h2 class="font-semibold">فهرست مطالب</h2>
					<ul class="mt-4 text-xs">
						{headings.map(({ depth, slug, text }) => (
							<li class="line-clamp-2 hover:text-accent">
								<a
									class={`block ${depth <= 2 ? "mt-3" : "mt-2 ps-3 text-[0.6875rem]"}`}
									href={`#${slug}`}
									aria-label={`Scroll to section: ${text}`}
								>
									<span class="me-1">{"#".repeat(depth)}</span>
									{text}
								</a>
							</li>
						))}
					</ul>
				</aside>
			)
		}
		<article class="flex-grow break-words" data-pagefind-body>
			<div id="blog-hero" class="mb-5"><BlogHero content={post} /></div>
			
			{
				!!headings.length && (
					<aside class="order-2 basis-64 block lg:hidden">
						<h2 class="font-semibold">فهرست مطالب</h2>
						<ul class="mt-4 text-sm">
							{headings.map(({ depth, slug, text }) => (
								<li class="line-clamp-2 hover:text-accent">
									<a
										class={`block ${depth <= 2 ? "mt-3" : "mt-2 ps-3 text-[0.6875rem]"}`}
										href={`#${slug}`}
										aria-label={`Scroll to section: ${text}`}
									>
										<span class="me-1">{"#".repeat(depth)}</span>
										{text}
									</a>
								</li>
							))}
						</ul>
					</aside>
				)
			}

			
			<div
				class="prose prose-lg prose-cactus my-12 prose-headings:font-semibold prose-headings:before:absolute prose-headings:before:-ms-7 prose-headings:before:text-accent prose-headings:before:content-['#'] prose-th:before:content-none prose-a:text-accent prose-table:text-right prose-table:text-sm"
			>
				<slot />
				<!--<hr />
				 <h2>بک لینک ها</h2>
				<ul>
					
				</ul> -->
			</div>
			<JoinTelegram />
			<p></p>
			<Giscus slug={slug} />

		</article>
	</div>
	<button
		id="to-top-btn"
		class="z-90 fixed bottom-8 end-4 flex h-10 w-10 translate-y-28 items-center justify-center rounded-full border-2 border-transparent bg-zinc-200 text-3xl opacity-0 transition-all duration-300 hover:border-zinc-400 data-[show=true]:translate-y-0 data-[show=true]:opacity-100 dark:bg-zinc-700 sm:end-8 sm:h-12 sm:w-12"
		aria-label="Back to Top"
		data-show="false"
		><svg
			xmlns="http://www.w3.org/2000/svg"
			aria-hidden="true"
			focusable="false"
			fill="none"
			viewBox="0 0 24 24"
			stroke-width="2"
			stroke="currentColor"
			class="h-6 w-6"
		>
			<path stroke-linecap="round" stroke-linejoin="round" d="M4.5 15.75l7.5-7.5 7.5 7.5"></path>
		</svg>
	</button>
</BaseLayout>
